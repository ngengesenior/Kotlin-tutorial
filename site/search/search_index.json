{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Home"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"functions/","text":"Functions and Lambdas A function is a named block of code that performs a particular task. In Kotlin, a function always returns a value Declaring functions Functions in Kotlin are declared as follows fun function_name(param1:type1,param2:type2,.... ,paramn:typen):return type A quick example of a function that prints the classical , \"Hello World!\", will be like this; fun sayHello(){ println(\"Hello World!\") } The above function takes no parameters and returns type Unit.Unit is corresponds to void in Java. Now a function that takes two parameters and returns a value demonstrated thus; fun welomeStudent(name:String,id:String):String{ return \"Welcome $name. Your student id is $id\" } Calling functions Functions in Kotlin are called the same way like most languages. <function name>(arg1,arg2,..argn) Calling the above functions can be done as follows sayHello() welcomeStudent(\"John Doe\",\"HF1234\") Now the beauty of Kotlin in functions come in when we can call functions using named parameters as follows, welcomeStudent(id=\"HF123\",name=\"Mary Doe\") Imagine a functions with 20+ parameters; with Java and other languages, you must know the order in which the parameters are passed before calling the function.This is really not easy to retain. With named parameters, you don't have to know the order in which those parameters are passed. Functions with Single Expressions We can write a function that does addition of two integers and return the value as follows; fun add(a:Int,b:Int):Int { return a+ b } The above function is a single expression function. The single expression function can be simplified further as follows. fun add(a:Int,b:Int) = a + b As you might have noticed, we ommitted the return type because Kotlin will automatically infer the return type to be Int . Functions with default values Another awesome part of Kotlin is that it gives you the ability to give default values to your parameters. Let us take a real example. Say you are developing an app with two types of users, when user provides name, he/she is a regular user, but if not, they are anonymous. fun greetUser(name:String = \"Anonymous user\",userId:Int = 0) { println(\"Welcome $name. Your user id is $userId\") } The function can be called in the following ways. greetUser() // prints Welcome Anonymous user. Your userid is 0 greetUser(\"Ngenge Senior\")// Prints , Welcome Ngenge Senior. Your user id is 0 greetUser(name=\"Romeo\", userId=3) //Works as expected greetUser(userId=2,name=\"Julliet\")","title":"Functions"},{"location":"functions/#functions-and-lambdas","text":"A function is a named block of code that performs a particular task. In Kotlin, a function always returns a value","title":"Functions and Lambdas"},{"location":"functions/#declaring-functions","text":"Functions in Kotlin are declared as follows fun function_name(param1:type1,param2:type2,.... ,paramn:typen):return type A quick example of a function that prints the classical , \"Hello World!\", will be like this; fun sayHello(){ println(\"Hello World!\") } The above function takes no parameters and returns type Unit.Unit is corresponds to void in Java. Now a function that takes two parameters and returns a value demonstrated thus; fun welomeStudent(name:String,id:String):String{ return \"Welcome $name. Your student id is $id\" }","title":"Declaring functions"},{"location":"functions/#calling-functions","text":"Functions in Kotlin are called the same way like most languages. <function name>(arg1,arg2,..argn) Calling the above functions can be done as follows sayHello() welcomeStudent(\"John Doe\",\"HF1234\") Now the beauty of Kotlin in functions come in when we can call functions using named parameters as follows, welcomeStudent(id=\"HF123\",name=\"Mary Doe\") Imagine a functions with 20+ parameters; with Java and other languages, you must know the order in which the parameters are passed before calling the function.This is really not easy to retain. With named parameters, you don't have to know the order in which those parameters are passed.","title":"Calling functions"},{"location":"functions/#functions-with-single-expressions","text":"We can write a function that does addition of two integers and return the value as follows; fun add(a:Int,b:Int):Int { return a+ b } The above function is a single expression function. The single expression function can be simplified further as follows. fun add(a:Int,b:Int) = a + b As you might have noticed, we ommitted the return type because Kotlin will automatically infer the return type to be Int .","title":"Functions with Single Expressions"},{"location":"functions/#functions-with-default-values","text":"Another awesome part of Kotlin is that it gives you the ability to give default values to your parameters. Let us take a real example. Say you are developing an app with two types of users, when user provides name, he/she is a regular user, but if not, they are anonymous. fun greetUser(name:String = \"Anonymous user\",userId:Int = 0) { println(\"Welcome $name. Your user id is $userId\") } The function can be called in the following ways. greetUser() // prints Welcome Anonymous user. Your userid is 0 greetUser(\"Ngenge Senior\")// Prints , Welcome Ngenge Senior. Your user id is 0 greetUser(name=\"Romeo\", userId=3) //Works as expected greetUser(userId=2,name=\"Julliet\")","title":"Functions with default values"}]}